#!/bin/sh
##
# Definitions for unit test functions.

# directory of this script
dir="$(dirname $0)"

# assertion counts
assertFail=0;
assertPass=0
assertCount=0

##
# Assert actual and expected words are equal.
# @param actual word
# @param expected word
assertWordEqual() {
    assertCount=$((assertCount+1))
    if [ "$1" != "$2" ]; then
        echo "assertWordEqual: actual: $1 expected: $2" 1>&2
        assertFail=$((assertFail+1))
        return 1
    fi
    assertPass=$((assertPass+1))
    return 0;
}

##
# Assert actual and expected words are not equal.
# @param actual word
# @param expected word
assertWordNotEqual() {
    assertCount=$((assertCount+1))
    if [ "$1" = "$2" ]; then
        echo "assertWordNotEqual: actual: $1 expected: $2" 1>&2
        assertFail=$((assertFail+1))
        return 1
    fi
    assertPass=$((assertPass+1))
    return 0;
}

##
# Assert actual and expected strings are equal.
# @param actual string
# @param expected string
assertStringEqual() {
    assertCount=$((assertCount+1))
    if [ "$1" != "$2" ]; then
        echo "assertStringEqual: actual: \x22$1\x22 expected: \x22$2\x22" 1>&2
        assertFail=$((assertFail+1))
        return 1
    fi
    assertPass=$((assertPass+1))
    return 0;
}

##
# Assert actual and expected strings are not equal.
# @param actual string
# @param expected string
assertStringNotEqual() {
    assertCount=$((assertCount+1))
    if [ "$1" == "$2" ]; then
        echo "assertStringNotEqual: actual: \x22$1\x22 expected: \x22$2\x22" 1>&2
        assertFail=$((assertFail+1))
        return 1
    fi
    assertPass=$((assertPass+1))
    return 0;
}

##
# Assert actual and expected numerical values are equal.
# @param actual value
# @param expected value
assertEqual() {
    assertCount=$((assertCount+1))
    if [ "$1" -ne "$2" ]; then
        echo "assertEqual: actual: $1 expected: $2" 1>&2
        assertFail=$((assertFail+1))
        return 1
    fi
    assertPass=$((assertPass+1))
    return 0;
}

##
# Assert actual and expected numerical values are not equal.
# @param actual value
# @param expected value
assertNotEqual() {
    assertCount=$((assertCount+1))
    if [ "$1" -eq "$2" ]; then
        echo "assertNotEqual: actual: $1 expected: $2" 1>&2
        assertFail=$((assertFail+1))
        return 1
    fi
    assertPass=$((assertPass+1))
    return 0;
}

##
# Assert actual value is true (!= 0)
# @param actual value
assertTrue() {
    assertCount=$((assertCount+1))
    if [ "$1" = "0" ]; then
        echo "assertTrue: actual: $1" 1>&2
        assertFail=$((assertFail+1))
        return 1
    fi
    assertPass=$((assertPass+1))
    return 0;
}

##
# Assert actual value is false (= 0)
# @param actual value
assertFalse() {
    assertCount=$((assertCount+1))
    if [ "$1" != "0" ]; then
        echo "assertFalse: actual: $1" 1>&2
        assertFail=$((assertFail+1))
        return 1
    fi
    assertPass=$((assertPass+1))
    return 0;
}

##
# Show unit test summary
unitTestSummary() {
    echo "Test summary:"
    echo "  asserts passed: $assertPass" 1>&2
    echo "  asserts failed: $assertFail" 1>&2
    echo "  total asserts:  $assertCount" 1>&2
}

